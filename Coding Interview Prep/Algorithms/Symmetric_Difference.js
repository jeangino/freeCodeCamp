/**
 * Turns out [].includes() is faster than Set.has()
 */
let sym = (...args) => {
  return args.reduce((previous, current) => {
    const previousSet = new Set(previous);
    const currentSet = new Set(current);
    const result = new Set([]);
    for (let i = 0; i < previous.length; i++) {
      if (!currentSet.has(previous[i]) && !result.has(previous[i])) {
        result.add(previous[i]);
      }
    };
    for (let i = 0; i < current.length; i++) {
      if (!previousSet.has(current[i]) && !result.has(current[i])) {
        result.add(current[i]);
      }
    }
    return [...result];
  });
}

let symArray = (...args) => {
  return args.reduce((previous, current) => {
    const result = [];
    for (let i = 0; i < previous.length; i++) {
      if (!current.includes(previous[i]) && !result.includes(previous[i])) {
        result.push(previous[i]);
      }
    };
    for (let i = 0; i < current.length; i++) {
      if (!previous.includes(current[i]) && !result.includes(current[i])) {
        result.push(current[i]);
      }
    }
    return result;
  });
}



console.time('set')
console.log(sym([3, 3, 3, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]));
console.timeEnd('set')



console.time('array')
console.log(symArray([3, 3, 3, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 53, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5],[3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]));
console.timeEnd('array')
